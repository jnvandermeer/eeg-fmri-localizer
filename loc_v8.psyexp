<PsychoPy2experiment version="1.82.01" encoding="utf-8">
  <Settings>
    <Param name="Show mouse" val="False" valType="bool" updates="None"/>
    <Param name="Data filename" val="'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None"/>
    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>
    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>
    <Param name="color" val="$[0,0,0]" valType="str" updates="None"/>
    <Param name="Window size (pixels)" val="[1024, 768]" valType="code" updates="None"/>
    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>
    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>
    <Param name="Experiment info" val="{'participant':'', 'session':'001'}" valType="code" updates="None"/>
    <Param name="Save csv file" val="False" valType="bool" updates="None"/>
    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>
    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>
    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>
    <Param name="expName" val="loc_v1" valType="str" updates="None"/>
    <Param name="logging level" val="exp" valType="code" updates="None"/>
    <Param name="blendMode" val="avg" valType="str" updates="None"/>
    <Param name="Save excel file" val="False" valType="bool" updates="None"/>
    <Param name="Units" val="use prefs" valType="str" updates="None"/>
    <Param name="Save log file" val="True" valType="bool" updates="None"/>
    <Param name="Screen" val="1" valType="num" updates="None"/>
  </Settings>
  <Routines>
    <Routine name="instr">
      <CodeComponent name="start_trig_stuff">
        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="name" val="start_trig_stuff" valType="code" updates="None"/>
        <Param name="Begin Routine" val="# instantiate_ev_thread&#10;if eeg_system_used == 'none':&#10;    evt = ev_thread(none_sender())&#10;    &#10;&#10;elif eeg_system_used == 'bp':&#10;    evt = ev_thread(brain_products_sender())&#10;    &#10;&#10;elif eeg_system_used == 'egi':&#10;    evt = ev_thread(egi_sender())&#10;    &#10;&#10;# start the evt loop!&#10;evt.start()&#10;print('event struct - initialized')&#10;print(evt.isAlive())&#10;# send stuff now - with evt.send(10), for example.&#10;# send it either in the main loop - or in the audio, video and letter threads - i passed the object over there, too." valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
      </CodeComponent>
      <TextComponent name="instr_text">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="instr_text" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="white" valType="str" updates="constant"/>
        <Param name="text" val="Mind the numbers in the middle&#10;&#10;If the sequence changes:&#10;&#10;press a key!" valType="str" updates="constant"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>
      </TextComponent>
      <CodeComponent name="flip_instr">
        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="name" val="flip_instr" valType="code" updates="None"/>
        <Param name="Begin Routine" val="if GLOB_XFLIP:&#10;    instr_text.setFlipHoriz(True)&#10;if GLOB_YFLIP:&#10;    instr_text.setFlipVert(True)" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
      </CodeComponent>
      <KeyboardComponent name="key_begin">
        <Param name="correctAns" val="" valType="str" updates="constant"/>
        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>
        <Param name="name" val="key_begin" valType="code" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="discard previous" val="True" valType="bool" updates="constant"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="store" val="last key" valType="str" updates="constant"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="beide">
      <CodeComponent name="code">
        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="name" val="code" valType="code" updates="None"/>
        <Param name="Begin Routine" val="p1=play_vis_stim(win, hit_times_8Hz, right_cb,left_cb,fixation,'left')&#10;p1.run()&#10;a = play_audio_stim(sounds,'right',55)&#10;a.start()&#10;p2=play_vis_stim(win, hit_times_8Hz, right_cb,left_cb,fixation,'right')&#10;p2.run()&#10;&#10;#p3=play_vis_stim(win, hit_times_13Hz, right_cb,left_cb,fixation,'left')&#10;#p3.start()&#10;#p4=play_vis_stim(win, hit_times_13Hz, right_cb,left_cb,fixation,'right')&#10;#p4.start()&#10;&#10;" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
      </CodeComponent>
    </Routine>
    <Routine name="audio_55_L">
      <SoundComponent name="sound_3">
        <Param name="sound" val="audio_55Hz_L.wav" valType="str" updates="constant"/>
        <Param name="volume" val="1" valType="code" updates="constant"/>
        <Param name="name" val="sound_3" valType="code" updates="None"/>
        <Param name="stopVal" val="1.2" valType="code" updates="constant"/>
        <Param name="durationEstim" val="1.2" valType="code" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
      </SoundComponent>
    </Routine>
    <Routine name="instructions_2"/>
    <Routine name="key_4">
      <TextComponent name="text_5">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="text_5" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="white" valType="str" updates="constant"/>
        <Param name="text" val="Any text&#10;&#10;including line breaks" valType="str" updates="constant"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_5">
        <Param name="correctAns" val="" valType="str" updates="constant"/>
        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>
        <Param name="name" val="key_resp_5" valType="code" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="discard previous" val="True" valType="bool" updates="constant"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="store" val="last key" valType="str" updates="constant"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="audio_55_R">
      <SoundComponent name="sound_4">
        <Param name="sound" val="audio_55Hz_R.wav" valType="str" updates="constant"/>
        <Param name="volume" val="1" valType="code" updates="constant"/>
        <Param name="name" val="sound_4" valType="code" updates="None"/>
        <Param name="stopVal" val="1.2" valType="code" updates="constant"/>
        <Param name="durationEstim" val="1.2" valType="code" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
      </SoundComponent>
    </Routine>
    <Routine name="key_3">
      <TextComponent name="instructions">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="instructions" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="white" valType="str" updates="constant"/>
        <Param name="text" val="Try to keep focusing on the crosshair!" valType="str" updates="constant"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_4">
        <Param name="correctAns" val="" valType="str" updates="constant"/>
        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>
        <Param name="name" val="key_resp_4" valType="code" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="discard previous" val="True" valType="bool" updates="constant"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="store" val="last key" valType="str" updates="constant"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="key_2"/>
    <Routine name="vis_8Hz_L"/>
    <Routine name="flip_window">
      <TextComponent name="text_4">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="text_4" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="white" valType="str" updates="constant"/>
        <Param name="text" val="Flip window vertically?&#10;1) - Yes&#10;2) - No" valType="str" updates="constant"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_6">
        <Param name="correctAns" val="" valType="str" updates="constant"/>
        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>
        <Param name="name" val="key_resp_6" valType="code" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="discard previous" val="True" valType="bool" updates="constant"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="allowedKeys" val="'1','2','esc'" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="store" val="last key" valType="str" updates="constant"/>
      </KeyboardComponent>
      <CodeComponent name="code_2">
        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="name" val="code_2" valType="code" updates="None"/>
        <Param name="Begin Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="&#10;# VERY exhaustive - can i do this better?&#10;my_key_pressed = get_size_key.keys&#10;my_win_options = {'1':[-1.,1.], '2':[1.,1.]} # of course it is a comma - like everything in pyhton&#10;my_win_viewScales = my_win_options[my_key_pressed]&#10;&#10;win.viewScale=my_win_viewScales&#10;" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
      </CodeComponent>
    </Routine>
    <Routine name="end">
      <TextComponent name="end_text">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="end_text" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="white" valType="str" updates="constant"/>
        <Param name="text" val="This was the end - Thank you!" valType="str" updates="constant"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>
      </TextComponent>
      <KeyboardComponent name="end_key">
        <Param name="correctAns" val="" valType="str" updates="constant"/>
        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>
        <Param name="name" val="end_key" valType="code" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="discard previous" val="True" valType="bool" updates="constant"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="store" val="last key" valType="str" updates="constant"/>
      </KeyboardComponent>
      <CodeComponent name="end_experiment">
        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="name" val="end_experiment" valType="code" updates="None"/>
        <Param name="Begin Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="# stop my letter stream:&#10;# stop my event handler:&#10;evt.stop()&#10;core.quit()&#10;continueRoutine=False&#10;&#10;" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="lstream.setStop()&#10;" valType="extendedCode" updates="constant"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
      </CodeComponent>
    </Routine>
    <Routine name="play_audio">
      <SoundComponent name="sound_1">
        <Param name="sound" val="audio_40Hz_L.wav" valType="str" updates="constant"/>
        <Param name="volume" val="1" valType="code" updates="constant"/>
        <Param name="name" val="sound_1" valType="code" updates="None"/>
        <Param name="stopVal" val="1.0" valType="code" updates="constant"/>
        <Param name="durationEstim" val="1.0" valType="code" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
      </SoundComponent>
    </Routine>
    <Routine name="audio_40_R">
      <SoundComponent name="sound_2">
        <Param name="sound" val="audio_40Hz_R.wav" valType="str" updates="constant"/>
        <Param name="volume" val="1" valType="code" updates="constant"/>
        <Param name="name" val="sound_2" valType="code" updates="None"/>
        <Param name="stopVal" val="1.0" valType="code" updates="constant"/>
        <Param name="durationEstim" val="1.0" valType="code" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
      </SoundComponent>
    </Routine>
    <Routine name="vis_8Hz_L_2"/>
    <Routine name="do_letters">
      <CodeComponent name="letter_stim">
        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="name" val="letter_stim" valType="code" updates="None"/>
        <Param name="Begin Routine" val="text_stim = visual.TextStim(win=win, ori=0, name='text_4',&#10;    text='0',    font=u'Arial',&#10;    pos=[0, 0], height=0.1*SIZE_MUL_FACTOR, wrapWidth=None,&#10;    color=u'red', colorSpace='rgb', opacity=1,flipHoriz=GLOB_XFLIP,flipVert=GLOB_YFLIP,&#10;    depth=0.0)&#10;&#10;# txt event codes - declaration&#10;txt_evt_codes = {'normal':100, 'oddball':101}&#10;&#10;# quick and dirty shift function. Matlab has got its own built-in 'circshift' - I need to do it like this, now.&#10;import random # if I didn't , already! - or if psychopy didn't , already.&#10;def shift(seq, n):&#10;    n = n % len(seq)&#10;    return seq[n:] + seq[:n]&#10;&#10;# doesn't matter if it's a set or if it's a list, for our purposes&#10;# letters_for_letter_stream = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']&#10;# letters_for_letter_stream = [x.upper() for x in letters_for_letter_stream]&#10;letters_for_letter_stream = ['0','1','2','3','4','5','6','7','8','9']&#10;# list comprehension uppercase trick:&#10;&#10;&#10;# another thing to think about: setting a 'DEFAULT' input parameter (like NONE?) - how to do that?&#10;# the letter_stream could be done better and made more general. Now it's too focussed on 'letters', but it should be really focussed on 'characters' or 'strings', or whatever kind of elements may be.&#10;# the only thing is - in psychopy, it's not that easy to search-and-replace. In matlab it would've been quicker (for now). Program it in Spyder.. seems to be interesting!&#10;&#10;class letter_stream(threading.Thread):&#10;    def __init__(self,letters,switch_frequency,switch_probability,evt):&#10;        threading.Thread.__init__(self)&#10;&#10;        self.letters=letters&#10;        self.flag = 0&#10;        self.switch_frequency=switch_frequency&#10;        self.switch_probability = switch_probability&#10;        self.isstarted=0&#10;        self.current_letter='0'&#10;        self.stop = 0&#10;        self.type = 'normal'&#10;&#10;&#10;    def run(self):&#10;        print('started letter thread...')&#10;        self.isstarted=1&#10;        start_time=time.time()&#10;&#10;        letters=self.letters&#10;        switch_frequency=self.switch_frequency&#10;        switch_probability=self.switch_probability&#10;&#10;&#10;        cal_time = time.time()+switch_frequency # prevent from jumping the first later - irritating!&#10;        # keep on doing this - until the end of the experiment, when I 'quit' the CORE:&#10;    &#10;        # beauty fix - start 1 sec after start of the experiment&#10;        time.sleep(1.0)&#10;&#10;        # somehow control that things don't go too fast (effectively reduces the % change of an oddball occurring&#10;        lastoddball = 0 # set counter to 0&#10;        new_lim = 4 # make sure no oddball happens IMMEDEATELY into the experiment:&#10;        letter_direction = 1; # oddball = reverse letter direction&#10;&#10;        while True:&#10;            # if the time bigger than the 'cal' time:&#10;            if time.time() - cal_time &gt; 0:&#10;                # effecively, only run this code-block once every letter_time_interval:&#10;                cal_time = cal_time + switch_frequency&#10;                # switch the letter - according to the given chance:&#10;                if random.random() &lt; switch_probability and lastoddball &gt; new_lim:&#10;                    # make a (randomly chosen) ISI where nothing should happen.&#10;                    new_lim = 1+round(random.random()*3+2) # between 3 and 6 = the ISI - at LEAST&#10;                    lastoddball = 0&#10;                    letter_direction = letter_direction*-1&#10;                    # letters = shift(letters,-1)&#10;                    self.type = 'oddball'&#10;                else:&#10;                    lastoddball = lastoddball + 1&#10;                    self.type = 'normal'&#10;&#10;                letters = shift(letters,letter_direction) # well - to be true - it's ONLY the direction that counts, not the size. Like Vector in Dispicable Me.&#10;                # set the 'current' letter.&#10;                self.current_letter = letters[0]&#10;                # set the flag, too.&#10;                self.flag = 1&#10;            &#10;            # sleep - for only a short time.&#10;            time.sleep(0.01)&#10;    &#10;            if self.stop:&#10;                break&#10;&#10;&#10;&#10;    def getLetter(self):&#10;        return self.current_letter&#10;&#10;    def isStarted(self):&#10;        return self.isstarted&#10;&#10;    def queryFlag(self):&#10;        if self.flag==1:&#10;            self.flag = 0&#10;            return 1&#10;        else:&#10;            return 0&#10;&#10;    def setStop(self):&#10;        self.stop=1&#10;&#10;    def getType(self):&#10;        return self.type" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
      </CodeComponent>
    </Routine>
    <Routine name="main_routine">
      <CodeComponent name="handle_evt_thread">
        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="name" val="handle_evt_thread" valType="code" updates="None"/>
        <Param name="Begin Routine" val="# instantiate_ev_thread&#10;#if eeg_system_used == 'none':&#10;#    evt = ev_thread(none_sender())&#10;#    &#10;&#10;#elif eeg_system_used == 'bp':&#10;#    evt = ev_thread(brain_products_sender())&#10;#    &#10;&#10;#elif eeg_system_used == 'egi':&#10;#    evt = ev_thread(egi_sender())&#10;#    &#10;&#10;# start the evt loop!&#10;#evt.start()&#10;#print('event struct - initialized')&#10;#print(evt.isAlive())&#10;# send stuff now - with evt.send(10), for example.&#10;# send it either in the main loop - or in the audio, video and letter threads - i passed the object over there, too." valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="# aand... stop the evt's - at the end of the experiment.&#10;# should be fine.. I hope.&#10;evt.stop()" valType="extendedCode" updates="constant"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
      </CodeComponent>
      <CodeComponent name="main_experiment_loop">
        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="name" val="main_experiment_loop" valType="code" updates="None"/>
        <Param name="Begin Routine" val="# DO ALL DECLRATIONS HERE&#10;# this code block has 2 functions - (1) control time flow of the experimen, and (2) control visual elements/flashes&#10;&#10;import time&#10;checkerboard_hidden=True&#10;# for future reference: I need a struct (!) telling me what is 'inside' the visual stimulus - at all times!!&#10;&#10;# generated with a matlab script, so we can play around with other timing options&#10;# stuff that happens left is always equally long as stuff that happens right - good for fMRI&#10;# difference between 2 frequencies I cannot make exactly the same - so anything that compares frequencies should have NORMALIZED power&#10;&#10;only_audio = [[10.,20.,'audio',['left','40']],[112.5,130.,'audio',['left','40']],[242.5,260.,'audio',['left','40']],[50.,60.,'audio',['left','55']],[195.,205.,'audio',['left','55']],[312.5,330.,'audio',['left','55']],[30.,40.,'audio',['right','40']],[147.5,165.,'audio',['right','40']],[277.5,295.,'audio',['right','40']],[77.5,95.,'audio',['right','55']],[175.,185.,'audio',['right','55']],[215.,225.,'audio',['right','55']]]&#10;only_video = [[17.5,35.,'video',['left','8']],[135.,145.,'video',['left','8']],[280.,290.,'video',['left','8']],[87.5,105.,'video',['left','13']],[217.5,235.,'video',['left','13']],[320.,330.,'video',['left','13']],[52.5,70.,'video',['right','8']],[155.,165.,'video',['right','8']],[300.,310.,'video',['right','8']],[115.,125.,'video',['right','13']],[182.5,200.,'video',['right','13']],[252.5,270.,'video',['right','13']]]&#10;&#10;# this lasts for 5 minutes and 40 seconds in total (last 10 secs is REST)&#10;all_stims = [[10.,20.,'audio',['left','40']],[112.5,130.,'audio',['left','40']],[242.5,260.,'audio',['left','40']],[50.,60.,'audio',['left','55']],[195.,205.,'audio',['left','55']],[312.5,330.,'audio',['left','55']],[30.,40.,'audio',['right','40']],[147.5,165.,'audio',['right','40']],[277.5,295.,'audio',['right','40']],[77.5,95.,'audio',['right','55']],[175.,185.,'audio',['right','55']],[215.,225.,'audio',['right','55']],[17.5,35.,'video',['left','8']],[135.,145.,'video',['left','8']],[280.,290.,'video',['left','8']],[87.5,105.,'video',['left','13']],[217.5,235.,'video',['left','13']],[320.,330.,'video',['left','13']],[52.5,70.,'video',['right','8']],[155.,165.,'video',['right','8']],[300.,310.,'video',['right','8']],[115.,125.,'video',['right','13']],[182.5,200.,'video',['right','13']],[252.5,270.,'video',['right','13']]]&#10;all_timings = all_stims&#10;max_time = 340.;&#10;&#10;&#10;if GLOB_XFLIP:&#10;    right_visibleWedge_value =  [179.99, 360.]&#10;    left_visibleWedge_value = [0., 181.]&#10;else:&#10;    right_visibleWedge_value = [0., 181.]&#10;    left_visibleWedge_value =  [179.99, 360.]&#10;    &#10;# right checkerboard stimuli&#10;right_cb = visual.RadialStim(win, tex='sqrXsqr', color=1, size=2.*SIZE_MUL_FACTOR,&#10;                             visibleWedge=right_visibleWedge_value, radialCycles=5,&#10;                             angularCycles=10, interpolate=False, &#10;                             angularPhase=2*3.141592/360/20,autoLog=False)&#10;# right_cb_fl=right_cb&#10;# right_cb_fl.setAngularPhase(90)&#10;  &#10;# left checkerboard stimuli&#10;left_cb = visual.RadialStim(win, tex='sqrXsqr', color=1, size=2.*SIZE_MUL_FACTOR,&#10;                            visibleWedge=left_visibleWedge_value, radialCycles=5,&#10;                            angularCycles=10, interpolate=False,&#10;                            angularPhase=2*3.141592/360/20,autoLog=False)&#10;# left_cb_fl=left_cb&#10;# left_cb_fl.setAngularPhase(90)&#10;&#10;  &#10;# fixation dot - doesn't need flippi'n.&#10;fixation = visual.PatchStim(win, color=-0.25, colorSpace='rgb', tex=None,&#10;                            mask='circle', size=0.12*SIZE_MUL_FACTOR)&#10;&#10;&#10;vis_contents = [right_cb,left_cb,fixation,text_stim]&#10;&#10;&#10;def doFlash(win,vis_contents,side,freq,evt,lstream_ev_container):&#10;&#10;    # extract again the visual contents:&#10;    right_cb = vis_contents[0]&#10;    left_cb=vis_contents[1]&#10;    fixation=vis_contents[2]&#10;    text_stim=vis_contents[3]&#10;&#10;    if side=='left':&#10;        left_cb.contrast = -1.*left_cb.contrast&#10;    elif side=='right':&#10;        right_cb.contrast = -1.*right_cb.contrast&#10;    left_cb.draw()&#10;    right_cb.draw()&#10;    fixation.draw()&#10;    text_stim.draw()&#10;&#10;    # when for text, only a flip will be done with the checkerboard - send it here!&#10;    while len(lstream_ev_container)&gt;0:&#10;        evt.send(lstream_ev_container.pop(0))&#10;&#10;    win.flip()&#10;&#10;    # maybe skip this?&#10;    if vis_do_double_flip:&#10;        time.sleep(0.005)&#10;&#10;        if side=='left':&#10;            left_cb.contrast = -1.*left_cb.contrast&#10;        elif side=='right':&#10;            right_cb.contrast = -1.*right_cb.contrast&#10;        left_cb.draw()&#10;        right_cb.draw()&#10;        fixation.draw()&#10;        text_stim.draw()&#10;        win.flip()&#10;&#10;&#10;# seems to be a good thing to name it like this.&#10;def hideCheckerboard(win,vis_contents,lstream_ev_container):&#10;&#10;    right_cb = vis_contents[0]&#10;    left_cb=vis_contents[1]&#10;    fixation=vis_contents[2]&#10;    text_stim=vis_contents[3]&#10;    fixation.draw()&#10;    text_stim.draw()&#10;&#10;    # ugly code to make letters work nice with other flip() stuff that I do..&#10;    while len(lstream_ev_container)&gt;0:&#10;        evt.send(lstream_ev_container.pop(0))&#10;    &#10;&#10;    win.flip()&#10;    new_vis_contents = [fixation,text_stim]&#10;    return new_vis_contents&#10;&#10;&#10;def showCheckerboard(win,vis_contents):&#10;&#10;    right_cb = vis_contents[0]&#10;    left_cb=vis_contents[1]&#10;    fixation=vis_contents[2]&#10;    text_stim=vis_contents[3]&#10;    left_cb.draw()&#10;    right_cb.draw()&#10;    fixation.draw()&#10;    text_stim.draw()&#10;    new_vis_contents = [right_cb,left_cb,fixation,text_stim]&#10;    return new_vis_contents&#10;    &#10;&#10;&#10;def textFlip(win,vis_contents,video_is_running,lstream_ev_container):&#10;    # well - this could use some improvements - in conceptualization.&#10;    # the checkerboard_hidden could be done better.&#10;    # that's what you get when you are programming quick -n- dirty.&#10;   &#10;    # if the checkerboard is doing stuff - then just let the checkerboard refresh also the letter.&#10;    # in there, there's all the draw methods that u need!&#10;    # otherwise - do it ourselves.&#10;    # print video_is_running&#10;    if video_is_running:&#10;        pass&#10;    else:&#10;        # print(len(vis_contents))&#10;        for item in vis_contents:&#10;            item.draw()&#10;&#10;        # ugly code to make letters work nice with other flip() stuff that I do.&#10;        while len(lstream_ev_container)&gt;0:&#10;            # print(lstream_ev_container)&#10;            evt.send(lstream_ev_container.pop(0))&#10;        win.flip()&#10;        # empty it&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;# START MAIN EXPERIMENT HERE:&#10;start_time=time.time()&#10;&#10;# to control for showing(or not(!)) the checkerboard, to it like this:&#10;video_is_running = 0&#10;video_was_running = 0&#10;audio_is_running = 0&#10;audio_was_running = 0&#10;&#10;# this is to make lstream events only be sent RIGHT before a window flip.&#10;# I flip windows ONLY during checkerboard reversals, hide/show checkerboard - when VIS is ON&#10;# when VIS is OFF, I flip windows separately.&#10;# otherwise, I ask to flip the window TWICE during visual checkerboard stimulus - also with each letter - something I'd like to avoid, if possible.&#10;#&#10;#&#10;# I need to read up on screen refresh rates and pyglet and pygame draw() and flip() methods.&#10;#&#10;lstream_ev_container=[]&#10;&#10;# draw (only) the fixation cross, now, using the function:&#10;new_vis_contents=hideCheckerboard(win,vis_contents,lstream_ev_container)&#10;&#10;# control how/when audio and visual elements are created:&#10;v_next = 0&#10;a_next = 0&#10;&#10;&#10;# just start a separate thread - that contain letters, and which switches the letter - in memory - once per second&#10;# one the letter is changed - set a 'changed' flag appropriately (i.e., that I can query)&#10;# inside this loop - just query this thread - ask it if it changed - if it did, update the letter (&amp; 'flip' the window)&#10;letter_switch_interval = 1.0 # seconds&#10;letter_switch_probability = 0.33 # 15 % change of switching the 'wrong' way = subjects have to press.&#10;# the letters list has been defined somewhere else (previously!)&#10;lstream = letter_stream(letters_for_letter_stream,letter_switch_interval,letter_switch_probability,evt)&#10;lstream.start()&#10;&#10;# gather lstreams in here, and empty them upon a window flip&#10;&#10;time_of_other_half_reset = 0.&#10;&#10;while True:&#10;    current_time=time.time() - start_time&#10;&#10;    # prevent you from seeing the checkerboard like hell. Frequency = 0.4 Hz; a little less than once/2 sec.&#10;    if vis_flip_other_side and video_is_running:&#10;        time_since_last_other_half_reset = current_time - time_of_other_half_reset&#10;&#10;        if time_since_last_other_half_reset &gt; vis_flip_other_side_interval:&#10;&#10;            # duh.&#10;            time_of_other_half_reset = current_time&#10;&#10;            # if you have video_is_running, you definitely have a v_current that's an object.&#10;            side = v_current.getSide()&#10;            # print side&#10;            # print(time_since_last_other_half_reset)&#10;            # print(time_of_other_half_reset)&#10;&#10;            if side == 'left':&#10;                right_cb.contrast = -1.*right_cb.contrast&#10;            elif side == 'right':&#10;                left_cb.contrast = -1.*left_cb.contrast&#10;&#10;        else:&#10;            pass&#10;&#10;    # check out what we should do right now.&#10;    tasks=[]&#10;    for item in all_timings:&#10;        if current_time &gt; item[0] and current_time &lt; item[1]:&#10;            tasks.append([item[2], item[3]])&#10;    &#10;    # keep track of them over here (!) - so thay they are (properly!!!) reset!&#10;    video_is_running = 0&#10;    audio_is_running = 0&#10;&#10;&#10;    for task in tasks:&#10;    &#10;        action = task[0]&#10;        options = task[1]&#10;    &#10;        # set the is_now_running to: zero - so that at the end of this loop, the is_now_running == 1 whenever a checkerboard vis_stim is present.&#10;&#10;        if action=='video':&#10;&#10;           # only set this to 1 if there is a task - 'video' in the task stack.&#10;            video_is_running = 1&#10;&#10;            # only set the checkerboard to true if it was off, first.&#10;            if not video_was_running:&#10;                print(' -- ENABLE CHECKERBOARD')&#10;                new_vis_contents = showCheckerboard(win,vis_contents)&#10;&#10;&#10;            # only create the v_next, if its value is not the (int) 0 value - so do THIS at first iteration of the block.&#10;            # so - at the start; make an thread - and start it - and make a new thread just after that, just in case&#10;            if v_next==0:&#10;                v_current = play_vis_stim(vis_times,options[0],options[1],evt)&#10;                v_current.start()&#10;                v_next = play_vis_stim(vis_times,options[0],options[1],evt)&#10;            else:&#10;                # when NOT at the start - cycle to the next one - start it - prepare the new one already.&#10;                # only start up the visual new thread once the current one is done (IF the task has a video element in it)&#10;                if not v_current.isAlive():     &#10;                    v_current=v_next&#10;                    v_current.start()&#10;                    v_next = play_vis_stim(vis_times,options[0],options[1],evt)&#10;&#10;&#10;        # handle the 'audio:&#10;        if action=='audio':&#10;&#10;            # mark audio is running(now)&#10;            audio_is_running = 1&#10;&#10;&#10;            # same handling for audio.&#10;            if a_next==0:&#10;                a_current=play_audio_stim(sounds,options[0],options[1],evt)&#10;                a_current.start()&#10;                a_next=play_audio_stim(sounds,options[0],options[1],evt)&#10;            else:&#10;                if not a_current.isAlive():                &#10;                    a_current = a_next&#10;                    a_current.start()&#10;                    # send a trig! - let the audio do it, itself - no need to clog my code here.&#10;                    a_next=play_audio_stim(sounds,options[0],options[1],evt)&#10;                    &#10;&#10;&#10;    # break the main loop if time is over:&#10;    if current_time &gt; max_time:&#10;        # a graceful exit for the thread which normally wouldn't end...&#10;        lstream.setStop()&#10;        break&#10;&#10;&#10;&#10;    # do the check here for either showing, or hiding, the checkerboards. Probably I can also ask for which elements are in the current visual stimulus.&#10;    # need pygame manual for that...&#10;    if video_was_running and not video_is_running:&#10;        print(' -- DISABLE CHECKERBOARD')&#10;        new_vis_contents = hideCheckerboard(win,vis_contents,lstream_ev_container)&#10;&#10;    &#10;    # reset the video and/or audio stimuli:&#10;    if not video_is_running:&#10;        v_next = 0&#10;    if not audio_is_running:&#10;        a_next = 0&#10;&#10;&#10;    # check if the visual thread is running, if so:&#10;    # sort of assumes that there are checkerboard!&#10;    if video_is_running:&#10;        if v_current.queryFlash():&#10;            # do the flash&#10;            side = v_current.getSide()&#10;            freq = v_current.getFreq()&#10;            # send a code indicating a flash to my evt handler object thread - fire &amp; forget..?&#10;            evt.send(visual_evt_codes[side][freq])&#10;            doFlash(win,vis_contents,side,freq,evt,lstream_ev_container)&#10;&#10;            # reset the flash value - and continue:&#10;            v_current.resetFlash()&#10;&#10;&#10;&#10;&#10;    # and now - handle the beginning and endings of audio and visual; according to the example above.&#10;    # long-winded code block to resolve events:&#10;    # what's happening should be straightforward.&#10;    if video_was_running and not video_is_running:&#10;        # send a video end marker&#10;        freq = v_current.getFreq()&#10;        side = v_current.getSide()&#10;        evt.send(visual_evt_codes_end[side][freq])&#10;&#10;    if video_is_running and not video_was_running:&#10;        # send a video begin marker&#10;        freq = v_current.getFreq()&#10;        side = v_current.getSide()&#10;        evt.send(visual_evt_codes_begin[side][freq])&#10;&#10;    if audio_was_running and not audio_is_running:&#10;        # send an audio end marker&#10;        freq = a_current.getFreq()&#10;        side = a_current.getSide()&#10;        evt.send(audio_evt_codes_end[side][freq])&#10;&#10;    if audio_is_running and not audio_was_running:&#10;        # send an audio begin marker&#10;        freq = a_current.getFreq()&#10;        side = a_current.getSide()&#10;        evt.send(audio_evt_codes_begin[side][freq])&#10;&#10;&#10;   # to keep track, do it like this:&#10;    video_was_running = video_is_running&#10;    audio_was_running = audio_is_running&#10;&#10;    time.sleep(0.0005) # be kind to the computer - we won't need crazy timing accuracy - just accurate markers.&#10;&#10;&#10;&#10;    # resolve letter stream.&#10;    if lstream.queryFlag():&#10;        letter = lstream.getLetter()&#10;        ltype = lstream.getType()&#10;&#10;        # send my letter event!!&#10;        # print('trying to send: ' + str(txt_evt_codes[ltype]))&#10;        evt.send(txt_evt_codes[ltype])&#10;        lstream_ev_container.append(txt_evt_codes[ltype]+10)&#10;        # stream_ev_container=[]&#10;&#10;        text_stim.text=letter&#10;        text_stim.text=text_stim.text # according to suggestion??&#10;        textFlip(win,new_vis_contents,video_is_running,lstream_ev_container)&#10;        &#10;&#10;    # ADD-ON which only works in psychopy?&#10;    # enable key break...&#10;    # do the key&#10;    if event.getKeys(keyList=[&quot;escape&quot;]):&#10;        # stop my letter stream:&#10;        lstream.setStop()&#10;        # stop my event handler:&#10;        evt.stop()&#10;        core.quit()&#10;        continueRoutine=False&#10;&#10;#    key = event.getKeys() # \also check for a keyboard trigger (any key) &#10;#    if len(key) &gt; 0:&#10;#       if not key == ['space']:&#10;#          pass&#10;#     else:&#10;#         if key == ['escape']: core.quit() #  escape allows us to exit&#10;#        continueRoutine = False&#10;&#10;" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
      </CodeComponent>
    </Routine>
    <Routine name="do_audio">
      <CodeComponent name="audio_stim">
        <Param name="Begin Experiment" val="import threading&#10;import time&#10;&#10;&#10;# define my dict.&#10;sounds={'left':{'40':sound.Sound('stim/audio_40Hz_L.wav', secs=-1),'55':sound.Sound('stim/audio_55Hz_L.wav', secs=-1)},'right':{'40':sound.Sound('stim/audio_40Hz_R.wav', secs=-1),'55':sound.Sound('stim/audio_55Hz_R.wav', secs=-1)}}&#10;&#10;# initiate my volumes...&#10;sounds['left']['40'].setVolume(1)&#10;sounds['right']['40'].setVolume(1)&#10;sounds['left']['55'].setVolume(1)&#10;sounds['right']['55'].setVolume(1)&#10;&#10;# for later, too.&#10;audio_evt_codes={'left':{'40':41,'55':51},'right':{'40':42,'55':52}}&#10;audio_evt_codes_begin={'left':{'40':43,'55':53},'right':{'40':44,'55':54}}&#10;audio_evt_codes_end={'left':{'40':45,'55':55},'right':{'40':46,'55':56}}&#10;&#10;&#10;class play_audio_stim(threading.Thread):&#10;    def __init__(self,sounds,side,freq,evt):&#10;        threading.Thread.__init__(self)&#10;        self.side=side&#10;        self.freq=freq&#10;        self.sounds=sounds&#10;        self.isstarted=0&#10;&#10;    def run(self):&#10;        print('started audio thread...')&#10;        self.isstarted=1&#10;        start_time=time.time()&#10;        sounds=self.sounds&#10;        freq=self.freq&#10;        side=self.side&#10;&#10;        # send the code here to external device using my own object - then proceed by playing the sound&#10;        evt.send(audio_evt_codes[side][freq])&#10;&#10;&#10;        # current_time = time.time() - start_time&#10;        # print current_time&#10;        my_sound = sounds[side][freq]&#10;        my_sound.play()&#10;        # ... aaand... we neatly wait untill the sound has been finished!&#10;        time.sleep(my_sound.getDuration())&#10;        current_time = time.time() - start_time&#10;        print '---'&#10;        print current_time&#10;&#10;        &#10;    def isStarted(self):&#10;        return self.isstarted&#10;&#10;    def getSide(self):&#10;        return self.side&#10;&#10;    def getFreq(self):&#10;        return self.freq" valType="extendedCode" updates="constant"/>
        <Param name="name" val="audio_stim" valType="code" updates="None"/>
        <Param name="Begin Routine" val="# a = play_audio_stim(sounds,'right',55)&#10;# a.start()&#10;" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
      </CodeComponent>
    </Routine>
    <Routine name="resolve_win_flip">
      <CodeComponent name="code_4">
        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="name" val="code_4" valType="code" updates="None"/>
        <Param name="Begin Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
      </CodeComponent>
    </Routine>
    <Routine name="key">
      <TextComponent name="text_3">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="text_3" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="white" valType="str" updates="constant"/>
        <Param name="text" val="Any text&#10;&#10;including line breaks" valType="str" updates="constant"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_3">
        <Param name="correctAns" val="" valType="str" updates="constant"/>
        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>
        <Param name="name" val="key_resp_3" valType="code" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="discard previous" val="True" valType="bool" updates="constant"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="store" val="last key" valType="str" updates="constant"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="do_video">
      <CodeComponent name="vis_stim">
        <Param name="Begin Experiment" val="import time&#10;import threading&#10;import copy&#10;&#10;&#10;# control whether we will do single or double checkerboard flips:&#10;global vis_do_double_flip&#10;vis_do_double_flip = False&#10;&#10;# control whether we will do the other side too, with freq of 0.4 Hz - to avoid ghosting artifact in yoru eye.&#10;# global vis_flip_other_side&#10;vis_flip_other_side = True&#10;vis_flip_other_side_interval = 2.5 # this many seconds pass untill the otherside's contrast is flipped.&#10;&#10;# initiate my visual stimuli:&#10;vis_times={'8':[0.001,0.111, 0.253,0.373,0.475, 0.600],'13':[0.001,0.078,0.151,0.214,0.300,0.376,0.442,0.525,0.600]}&#10;&#10;# so these are the individual STIMS (which we don't have for audio)&#10;visual_evt_codes={'left':{'8':87,'13':137},'right':{'8':88,'13':138}}&#10;&#10;# these are markers for the frequency analysis&#10;visual_evt_codes_begin={'left':{'8':83,'13':133},'right':{'8':84,'13':134}}&#10;visual_evt_codes_end={'left':{'8':85,'13':135},'right':{'8':86,'13':136}}&#10;&#10;# these are the thread starts - which conveniently also denotify what your visual segments&#10;# should BE - in case you wish to reconstruct the visual ERP&#10;global visual_evt_codes_beginvisthread&#10;visual_evt_codes_beginvisthread={'left':{'8':81,'13':131},'right':{'8':82,'13':132}}&#10;&#10;&#10;# for audio - we need to actually insert ADDITIONAL markers denotifying the start and end of each segment.&#10;# AND (!) also denotify the start and end of each click - but this will be done later in MATLAB. I guess.&#10;# we need to find the correct sequence, for this. &#10;# reconstruct these from the MATLAB data.&#10;&#10;&#10;class play_vis_stim(threading.Thread):&#10;    def __init__(self,vis_times,side,freq,evt):&#10;        threading.Thread.__init__(self)&#10;        self.win=win&#10;        # is this it?&#10;        self.hit_times=copy.deepcopy(vis_times[freq])&#10;        self.side=side&#10;        self.flash=0&#10;        self.isstarted=0&#10;        self.freq = freq&#10;&#10;        print self.side&#10;        print self.freq&#10;&#10;&#10;    def run(self):&#10;&#10;        print('started visual thread...')&#10;        side=self.side&#10;        freq=self.freq&#10;        self.isstarted=1&#10;        # get the list&#10;        hit_times = self.hit_times&#10;        # this is to make things run/work&#10;        max_time = hit_times[-1]&#10;        hit_times[-1] = -1&#10;&#10;        start_time=time.time()&#10;        target_time = hit_times.pop(0)&#10;        evt.send(visual_evt_codes_beginvisthread[side][freq])&#10;&#10;        while True:&#10;            current_time = time.time() - start_time&#10;            if current_time &gt;target_time and target_time &gt; 0:&#10;    &#10;                #print current_time&#10;                #print target_time&#10;                #print 'flashed'&#10;&#10;                self.flash=1;&#10;&#10;                # get us a NEW target time !!&#10;                target_time = hit_times.pop(0)&#10;&#10;            if current_time&gt;max_time:&#10;                #print 'broke while loop at time = %f ' % current_time&#10;                break&#10;    &#10;            time.sleep(0.0005)&#10;&#10;    def resetFlash(self):&#10;        self.flash=0&#10;&#10;    def queryFlash(self):&#10;        return self.flash&#10;&#10;    def getSide(self):&#10;        return self.side&#10;&#10;    def isStarted(self):&#10;        return self.isstarted&#10;&#10;    def getFreq(self):&#10;        return self.freq" valType="extendedCode" updates="constant"/>
        <Param name="name" val="vis_stim" valType="code" updates="None"/>
        <Param name="Begin Routine" val="#for i in range(0,100):&#10; #   if i==0:&#10;  #      p1=play_vis_stim(win, hit_times_8Hz, right_cb,left_cb,fixation,'left')&#10;   #     p1.run()&#10;    #time.sleep(0.1)&#10;&#10;#p2=play_vis_stim(win, hit_times_8Hz, right_cb,left_cb,fixation,'right')&#10;#p2.start()&#10;&#10;#p3=play_vis_stim(win, hit_times_13Hz, right_cb,left_cb,fixation,'left')&#10;#p3.start()&#10;#p4=play_vis_stim(win, hit_times_13Hz, right_cb,left_cb,fixation,'right')&#10;#p4.start()&#10;&#10;" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
      </CodeComponent>
    </Routine>
    <Routine name="ask_for_size">
      <TextComponent name="text_ask_for_version">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="text_ask_for_version" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="white" valType="str" updates="constant"/>
        <Param name="text" val="(1) Normal (100%)&#10;(2) Smaller (75%)&#10;(3) Even smaller (50%)&#10;(4) Smallest (25%)&#10;(5) Bigger (125%)&#10;(6) Too big (150%)" valType="str" updates="constant"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>
      </TextComponent>
      <KeyboardComponent name="get_size_key">
        <Param name="correctAns" val="" valType="str" updates="constant"/>
        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>
        <Param name="name" val="get_size_key" valType="code" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="discard previous" val="True" valType="bool" updates="constant"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="allowedKeys" val="'1','2','3','4','5','6','escape'" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="store" val="last key" valType="str" updates="constant"/>
      </KeyboardComponent>
      <CodeComponent name="resolve_stimuli_size">
        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="name" val="resolve_stimuli_size" valType="code" updates="None"/>
        <Param name="Begin Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="&#10;# VERY exhaustive - can i do this better?&#10;my_key_pressed = get_size_key.keys&#10;stimuli_sizes = {'1':1.00, '2':0.75,'3':0.50,'4':0.25,'5':1.25,'6':1.50} # of course it is a comma - like everything in pyhton&#10;SIZE_MUL_FACTOR = stimuli_sizes[my_key_pressed]&#10;" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
      </CodeComponent>
    </Routine>
    <Routine name="text">
      <TextComponent name="text_2">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="text_2" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="white" valType="str" updates="constant"/>
        <Param name="text" val="Any text&#10;&#10;including line breaks" valType="str" updates="constant"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="correctAns" val="" valType="str" updates="constant"/>
        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>
        <Param name="name" val="key_resp_2" valType="code" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="discard previous" val="True" valType="bool" updates="constant"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="store" val="last key" valType="str" updates="constant"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="ask_for_flip">
      <TextComponent name="text_ask_for_flip">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="text_ask_for_flip" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="white" valType="str" updates="constant"/>
        <Param name="text" val="1) No Flip?&#10;2) Flip x-axis?&#10;3) Flip y-axis?&#10;4) FLip both?" valType="str" updates="constant"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>
      </TextComponent>
      <KeyboardComponent name="get_ask_for_flip">
        <Param name="correctAns" val="" valType="str" updates="constant"/>
        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>
        <Param name="name" val="get_ask_for_flip" valType="code" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="discard previous" val="True" valType="bool" updates="constant"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="allowedKeys" val="'1','2','3','4','esc'" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="store" val="last key" valType="str" updates="constant"/>
      </KeyboardComponent>
      <CodeComponent name="code_3">
        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="name" val="code_3" valType="code" updates="None"/>
        <Param name="Begin Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="my_key_pressed = get_ask_for_flip.keys&#10;my_win_viewScale_options = {'1':[False,False], '2':[True,False],'3':[False,True],'4':[True,True]} # of course it is a comma - like everything in pyhton&#10; &#10;GLOB_XFLIP = my_win_viewScale_options[my_key_pressed][0]&#10;GLOB_YFLIP = my_win_viewScale_options[my_key_pressed][1]&#10;# store for later -- apply just before giving instructions&#10;# my_win_viewScale_option = my_win_viewScale_options[my_key_pressed]" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
      </CodeComponent>
    </Routine>
    <Routine name="do_triggers">
      <CodeComponent name="code_triggers">
        <Param name="Begin Experiment" val="# -*- coding: utf-8 -*-&#10;&quot;&quot;&quot;&#10;Created on Wed May 27 12:57:03 2015&#10;&#10;@author: Johan&#10;&quot;&quot;&quot;&#10;# this is all I need to make my experiment output some triggers.&#10;# USAGE (very simple):&#10;&#10;# check the sender objects - use the one appropriate!&#10;# then - instantiate an ev_thread - give as agurment an instantiation of the appropriate sender object.&#10;&#10;#   evt = evt_thread(egi_sender())&#10;&#10;# then  start it:&#10;&#10;#   evt.start()&#10;&#10;# then - send events like so (i.e., strings!)&#10;# brain products DOES wish only for INTs, though. That sort of sucks, given that EGI accepts strings. Naja. Implement it anyway.&#10;&#10;#   evt.send(10)&#10;&#10;# finally, at the end of the experiment  - stop it&#10;&#10;#   evt.stop()&#10;&#10;&#10;# a class that sends events regardless of attached device. So that during my experiment, I don't&#10;# have to worry aobut that - the abstraction lies in here.&#10;&#10;# written on-the-fly. So abstractions are right now something to improve upon.&#10;# like: where do I do my device-specific stuff, do I make own functions for them, and where?&#10;# right now I opted to have it distributed into the class itself, while in prinicple,&#10;# it's nicer to maybe even make sub-classes per device for easy implementation later on.&#10;# hmm - maybe I shoudl do this anyway. Damn.&#10;&#10;# let's see how much the quick-n-dirty class implementation method of work would be&#10;# improved by using python and NOT matlab - the king of quick n dirty.&#10;&#10;&#10;&#10;# import parallel&#10;import threading&#10;&#10;import time&#10;&#10;# fill in later to allow me to send BP triggers via parallel.&#10;# most easy now - i just need to take care to instantiate the right object.&#10;# and THEN - I just use init, send and finish!!&#10;# maybe I could even make a super-class of this.&#10;# but not.. now..&#10;&#10;&#10;# use this nice 'dummy' class! - so that u have the object, but it doesn't do anything.&#10;class none_sender():&#10;    def __init__(self):&#10;        pass&#10;    &#10;    def init(self):&#10;        print('none_sender: INITIALIZED')&#10;    &#10;    def send(self,ev):&#10;        # print('none_sender: sending: ' + str(ev))&#10;        # for me a print; normally:&#10;        pass&#10;    &#10;    def finish(self):&#10;        print('none_sender: DISCONNECT/STOPPED')&#10;    &#10;&#10;&#10;class brain_products_sender():&#10;    def __init__(self):&#10;        pass&#10;    &#10;    def init(self):&#10;        pass&#10;    &#10;    def send(self,ev):&#10;        pass&#10;    &#10;    def finish(self):&#10;        pass&#10;    &#10;&#10;# this looks a little bit cleaner, already - i can focus just on one class if i wish&#10;# to implement another recorder.&#10;class egi_sender():&#10;    def __init__(self):&#10;        pass&#10;        &#10;    def init(self):&#10;        # stuff we beed to send stuff:&#10;        import egi.simple as egi&#10;        ns = egi.Netstation()&#10;        ns.connect('10.0.0.42', 55513) # sample address and port -- change according to your network settings            &#10;        ns.BeginSession()&#10;        ns.sync()&#10;        ns.StartRecording()&#10;        # save it to obj namespace for later use.&#10;        self.ns=ns&#10;        print('egi_sender: INITIALIZED')&#10;&#10;    &#10;    def send(self,ev):&#10;        ns = self.ns&#10;        ev=str(ev)&#10;        print('egi_sender: sending: ' + str(ev))&#10;        timestamp = 0.&#10;        ns.send_event( ev, label=ev, timestamp=egi.ms_localtime(), table = {'fld1' : ev} ) &#10;        #ns.send_event( 'evt_', label=str(ev), timestamp=timestamp, table = {'label' : str(ev), 'timestamp' : timestamp} ) &#10;        &#10;    def finish(self):&#10;        ns = self.ns&#10;        ns.StopRecording()&#10;        ns.EndSession()&#10;        ns.disconnect()&#10;        print('egi_sender: DISCONNECT/STOPPED')&#10;&#10;&#10;&#10;&#10;# the MAIN class: ev_sender!&#10;class ev_thread(threading.Thread):&#10;    &#10;    # init asks you for what kind of device you have attached&#10;    # it also inits for you - if needed&#10;    def __init__(self,sender_obj):&#10;        # overload..&#10;        threading.Thread.__init__(self)&#10;        # output_device can be either:&#10;        # 'no_device'&#10;        # 'egi'&#10;        # 'brain_products'&#10;        # !!! instantiate THIS object with a sender object!&#10;        self.sender = sender_obj&#10;        self.ev_list=[]&#10;        &#10;        &#10;        # do the init stuff separately (necessary) - makes you work for it&#10;        self.sender.init()&#10;        &#10;        # for clean exit - set to 0 now, of course.&#10;        self.stop_thread = 0&#10;&#10;&#10;    # so what should this thread do??&#10;    # -- ! just remain on the background at all times.&#10;    # as event handler, I can also try to implement a text thingy.&#10;    # then I can yield a LIST of output modalities&#10;    # ... if asked for this.&#10;    def run(self):&#10;&#10;        # keep on doing this - unless the stop signal has been given.&#10;        while True:&#10;&#10;            # check if there's something in the ev_list - resolve those&#10;            # then - continue.&#10;            if len(self.ev_list)&gt;0:&#10;                while len(self.ev_list)&gt;0:&#10;        &#10;                    # pop it..&#10;                    # apply the LIFO rule for sending events.&#10;                    ev=self.ev_list.pop(0)&#10;        &#10;                    # send it!&#10;                    self.sender.send(ev)&#10;                &#10;            &#10;            # arrange for a clean exit&#10;            if self.stop_thread == 1:&#10;                # disconnect, etc etc:&#10;                self.sender.finish() # yes - well, I don't call it stop, just to be totally tegendraads.&#10;                # then - exit this loop.&#10;                break&#10;            &#10;            # make sure the processor doens't take it all up!&#10;            # allow for 1 msec time inaccuracy, too.&#10;            time.sleep(0.0005)&#10;&#10;    def send(self,ev):&#10;        # just append it to the list - so it'll be taken off in the main while loop.&#10;        self.ev_list.append(ev)&#10;        &#10;        &#10;    def stop(self):&#10;        self.stop_thread = 1" valType="extendedCode" updates="constant"/>
        <Param name="name" val="code_triggers" valType="code" updates="None"/>
        <Param name="Begin Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
      </CodeComponent>
      <TextComponent name="select_eeg_system">
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="name" val="select_eeg_system" valType="code" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
        <Param name="color" val="white" valType="str" updates="constant"/>
        <Param name="text" val="What is your EEG system?&#10;&#10;1) Nothing (don't send triggers)&#10;&#10;2) EGI&#10;&#10;3) Brain Products" valType="str" updates="constant"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>
      </TextComponent>
      <KeyboardComponent name="eeg_resp">
        <Param name="correctAns" val="" valType="str" updates="constant"/>
        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>
        <Param name="name" val="eeg_resp" valType="code" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="discard previous" val="True" valType="bool" updates="constant"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="allowedKeys" val="'1','2','3','space','esc'" valType="code" updates="constant"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="store" val="last key" valType="str" updates="constant"/>
      </KeyboardComponent>
      <CodeComponent name="get_eeg_system">
        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="name" val="get_eeg_system" valType="code" updates="None"/>
        <Param name="Begin Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="&#10;# VERY exhaustive - can i do this better?&#10;my_key_pressed = eeg_resp.keys&#10;eeg_systems = {'1':'none', '2':'egi', '3':'bp'} # of course it is a comma - like everything in pyhton&#10;eeg_system_used = eeg_systems[my_key_pressed]&#10;&#10;print eeg_system_used" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="ask_for_size"/>
    <Routine name="ask_for_flip"/>
    <Routine name="do_video"/>
    <Routine name="do_audio"/>
    <Routine name="do_letters"/>
    <Routine name="do_triggers"/>
    <Routine name="instr"/>
    <Routine name="main_routine"/>
    <Routine name="end"/>
  </Flow>
</PsychoPy2experiment>
